
/*****************************      Entorno     *********************************/

1 => WSL Linux debian


2 => Extensiones
  2.1 =>  Reactjs code snippets   (React-Native/React/Redux snippets for es6/es7) 
          https://marketplace.visualstudio.com/items?itemName=EQuimper.react-native-react-redux
          Ejemplo para crear componente 
          
            imr + tab
            slr + tab


/*****************************     REACT   *********************************/


1 => npm init
2 => Punto de entrada src/index.js
3 => npm install react react-dom
4 => Creamos nuestra carpeta src  que contenga el archivo  => index.js
        4.1 => creamos la base:

          import React from 'react'
          import { createRoot } from 'react-dom/client'
          import App from './components/App'

          const container = document.getElementById('app')
          const root = createRoot(container) // createRoot(container!) if you use TypeScript
          root.render(<App tab="home" />)


5 => Creamos nuestra carpeta public/   que contenga el archivo  => index.html

          <!DOCTYPE html>
          <html lang="en">

          <head>
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>React Shop</title>
          </head>

          <body>
            <div id="app"></div>
          </body>

          </html>


6 => Creamos nuestra carpeta src/components  que contenga el archivo => App.jsx
      6.1 Creamos el hola mundo para probar:

        import React from 'react'
        import '../styles/global.scss'

        const App = () => {
          return (
            <h1>Hola Mundo</h1>
          );
        }

        export default App;

7 =>  Instalamos babel, webpack y 
        npm install @babel/core @babel/preset-env @babel/preset-react 
        npm install webpack webpack-cli webpack-dev-server
        npm install babel-loader html-loader html-webpack-plugin
        npm i mini-css-extract-plugin css-loader style-loader sass sass-loader -D

8 =>   Comenzamos a configurar
      8.1 => Creamos el archivo .gitignore  =>  https://www.toptal.com/developers/gitignore
            node_modules

      8.1 => Creamos el archivo .babelrc
        {
            "presets": [
                "@babel/preset-env",
                "@babel/preset-react"
            ]
        }
      8.3 => Creamos el archivo  webpack.config.js

            const path = require('path');
            const HtmlWebpackPlugin = require('html-webpack-plugin');
            const MiniCssExtractPlugin = require('mini-css-extract-plugin');

            module.exports = {
              entry: './src/index.js',
              output: {
                path: path.resolve(__dirname, 'dist'),
                filename: 'bundle.js',
              },
              mode: 'development',
              resolve: {
                extensions: ['.js', '.jsx'],
              },
              module: {
                rules: [
                  {
                    test: /\.(js|jsx)$/,
                    exclude: /node_modules/,
                    use: {
                      loader: 'babel-loader'
                    }
                  },
                  {
                    test: /\.html$/,
                    use: [
                      {
                        loader: 'html-loader'
                      }
                    ]
                  },
                  {
                    test: /\.(scss|css)$/,
                    use: [
                      "style-loader",
                      "css-loader",
                      "sass-loader",
                    ],
                  }
                ]
              },
              plugins: [
                new HtmlWebpackPlugin({
                  template: './public/index.html',
                  filename: './index.html'
                }),
                new MiniCssExtractPlugin({
                  filename: '[name].css'
                }),
              ],
              devServer: {
                allowedHosts: path.join(__dirname, 'dist'),
                compress: true,
                port: 3005,
              }
            }


      8.4 => Agregamos en el package.json
              "start": "webpack serve --open",
              "build": "webpack --mode production" 

            
9 => Agregamos una nueva carpeta en src/styles que contenga el archivo global.css
    Para probar : 
      body {
        margin: 0;
        font-family: 'Quicksand', sans-serif;
      }


/*****************************     PRIMEROS PASOS   *********************************/




10 =>  Creamos la carpeta src/containers que contenga el archivo Login.jsx

        import React from 'react';
        import '../styles/Login.scss'

        const Login = () => {
          return (
            <div className="login">
              <div className="form-container">
                <img src="./logos/logo_yard_sale.svg" alt="logo" className="logo" />
                <h1 className="title">Create a new password</h1>
                <p className="subtitle">Enter a new passwrd for yue account</p>
                <form action="/" className="form">
                  <label for="password" className="label">Password</label>
                  <input type="password" id="password" placeholder="*********" className="input input-password" />
                  <label for="new-password" className="label">Password</label>
                  <input type="password" id="new-password" placeholder="*********" className="input input-password" />
                  <input type="submit" value="Confirm" className="primary-button login-button" />
                </form>
              </div>
            </div>
          );
        }

        export default Login;


11 => Agregamos las fuentes en el archivo public/index.html

      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300;500;700&display=swap" rel="stylesheet">

12 => Creamos el archivo styles/_vars.scss
      :root {
        --white: #FFFFFF;
        --black: #000000;
        --very-light-pink: #C7C7C7;
        --text-input-field: #F7F7F7;
        --hospital-green: #ACD9B2;
        --sm: 14px;
        --md: 16px;
        --lg: 18px;
      }


13 => Creamos el archivo styles/Login.scss

        @use 'vars';

        .login {
          width: 100%;
          height: 100vh;
          display: grid;
          place-items: center;
        }
        .form-container {
          display: grid;
          grid-template-rows: auto 1fr auto;
          width: 300px;
        }
        .logo {
          width: 150px;
          margin-bottom: 48px;
          justify-self: center;
          display: none;
        }
        .title {
          font-size: var(--lg);
          margin-bottom: 12px;
          text-align: center;
        }
        .subtitle {
          color: var(--very-light-pink);
          font-size: var(--md);
          font-weight: 300;
          margin-top: 0;
          margin-bottom: 32px;
          text-align: center;
        }
        .form {
          display: flex;
          flex-direction: column;
        }
        .label {
          font-size: var(--sm);
          font-weight: bold;
          margin-bottom: 4px;
        }
        .input {
          background-color: var(--text-input-field);
          border: none;
          border-radius: 8px;
          height: 30px;
          font-size: var(--md);
          padding: 6px;
          margin-bottom: 12px;
        }
        .primary-button {
          background-color: var(--hospital-green);
          border-radius: 8px;
          border: none;
          color: var(--white);
          width: 100%;
          cursor: pointer;
          font-size: var(--md);
          font-weight: bold;
          height: 50px;
        }
        .login-button {
          margin-top: 14px;
          margin-bottom: 30px;
        }
        @media (max-width: 640px) {
          .logo {
            display: block;
          }
        }

14 => Creamos el archivo containers/Layout.jsx

        import React from 'react';

        const Layout = ({ children }) => {
          return (
            <div className="Layout">
              {children}
            </div>
          );
        }

        export default Layout;




15 =>   
Instalamos npm install react-router-dom
npm install react-router-dom@6

16 =>

webpack tuneado

const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = {
	entry: './src/index.js',
	output: {
		path: path.resolve(__dirname, 'dist'),
		filename: 'bundle.js',
		publicPath:'/'
	},
	mode: 'development',
	resolve: {
		extensions: ['.js', '.jsx'],
		alias : {
			'@components' : path.resolve(__dirname, 'src/components'),
			'@containers' : path.resolve(__dirname, 'src/containers'),
			'@pages' : path.resolve(__dirname, 'src/pages'),
			'@icons' : path.resolve(__dirname, 'src/assets/icons'),
			'@logos' : path.resolve(__dirname, 'src/assets/logos'),
			'@styles' : path.resolve(__dirname, 'src/styles'),

		}
	},
	module: {
		rules: [
			{
				test: /\.(js|jsx)$/,
				exclude: /node_modules/,
				use: {
					loader: 'babel-loader'
				}
			},
			{
				test: /\.html$/,
				use: [
					{
						loader: 'html-loader'
					}
				]
			},
			{
				test: /\.(scss|css)$/,
				use: [
					"style-loader",
					"css-loader",
					"sass-loader",
				],
			},
			{
				test: /\.(png|svg|jpg|gif)$/,
				type: 'asset'
			}
		]
	},
	plugins: [
		new HtmlWebpackPlugin({
			template: './public/index.html',
			filename: './index.html'
		}),
		new MiniCssExtractPlugin({
			filename: '[name].css'
		}),
	],
	devServer: {
		historyApiFallback: true,
		allowedHosts: path.join(__dirname, 'dist'),
		compress: true,
		port: 3005,
	}
}


17 =>

npm install axios
npm install @babel/plugin-transform-runtime
{
  "presets": [
      "@babel/preset-env",
      "@babel/preset-react"
  ],
  "plugins": [
    "@babel/plugin-transform-runtime"
  ]
}
18 =>
19 =>
20 =>
21 =>
22 =>
23 =>
24 =>
25 =>
26 =>